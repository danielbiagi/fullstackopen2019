{"version":3,"sources":["Filter.js","Notification.js","PersonForm.js","Persons.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","react_default","a","createElement","value","onChange","handleFilterChange","Notification","_ref","successMessage","errorMessage","className","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","rows","baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","filter","setFilter","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","persons","setPersons","_useState9","_useState10","setErrorMessage","_useState11","_useState12","setSucessMessage","useEffect","personService","initialPersons","updateNumber","p","person","find","pe","name","changedPerson","objectSpread","number","returnedPerson","map","setTimeout","catch","error","rowsFilter","toUpperCase","includes","key","onClick","window","confirm","handleDeleteClick","src_Notification","src_Filter","e","target","src_PersonForm","event","preventDefault","personObject","length","findIndex","src_Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6597e460.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => {\n    return (\n        <div>\n            filter shown with: <input value={props.value} onChange={props.handleFilterChange} />\n        </div>\n    )\n}\n\n\nexport default Filter","import React from 'react'\nimport './index.css'\n\nconst Notification = ({ successMessage, errorMessage }) => {\n    if ((successMessage === null) && (errorMessage === null)) {\n        return null\n    } else if (successMessage !== null) {\n        return (\n            <div className=\"success\">\n                {successMessage}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"error\">\n            {errorMessage}\n        </div>\n    )\n}\n\n\nexport default Notification","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <div>\n            <form onSubmit={props.addName}>\n                <div>\n                    name: <input value={props.newName} onChange={props.handleNameChange} />\n                </div>\n                <div>\n                    number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = (props) => {\n    return (\n        <div>\n            {props.rows()}\n        </div>\n    )\n}\n\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id, newObject) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    remove\n}","import React, { useState, useEffect } from 'react'\nimport Filter from './Filter'\nimport Notification from './Notification'\nimport PersonForm from './PersonForm'\nimport Persons from './Persons'\nimport personService from './services/persons'\n\n\nconst App = () => {\n  const [filter, setFilter] = useState('')\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [persons, setPersons] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSucessMessage] = useState(null)\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: persons.length + 1,\n    }\n    // Check for person's name\n    if ((persons.findIndex(a => a.name === personObject['name']) === -1) ? false : true) {\n      window.confirm(personObject['name'] + \" is already added to phonebook, replace the old number with the new one?\") ? updateNumber(personObject) : void (0)\n      // Check for person's number\n    } else if ((persons.findIndex(a => a.number === personObject['number']) === -1) ? false : true) {\n      setErrorMessage(personObject['number'] + \" number exists for other person!\")\n      setTimeout(() => { setErrorMessage(null) }, 5000)\n      // Insert person\n    } else {\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setSucessMessage(personObject['name'] + \" created!\")\n          setTimeout(() => { setSucessMessage(null) }, 5000)\n        })\n    }\n  }\n\n  const updateNumber = p => {\n    const person = persons.find(pe => pe.name === p.name)\n    const changedPerson = { ...person, number: p.number }\n\n    personService\n      .update(person.id, changedPerson)\n      .then(returnedPerson => {\n        setPersons(persons.map(person => person.name !== p.name ? person : returnedPerson))\n        setSucessMessage(returnedPerson['name'] + \" number updated!\")\n        setTimeout(() => { setSucessMessage(null) }, 5000)\n      })\n      .catch(error => {\n        setErrorMessage(`the person '${person.name}' was already deleted from server`)\n        setTimeout(() => { setErrorMessage(null) }, 5000)\n        setPersons(persons.filter(pe => pe.id !== p.id))\n      })\n  }\n\n  const handleDeleteClick = p => {\n    if (window.confirm(`Delete ${p.name} from phonebook?`)) {\n      personService\n        .remove(p.id)\n        .then(returnedPerson => {\n          setPersons(persons.filter(person => person.id !== p.id ? person : false))\n          setSucessMessage(p.name + \" deleted!\")\n          setTimeout(() => { setSucessMessage(null) }, 5000)\n        })\n        .catch(error => {\n          setErrorMessage(`the person '${p.name}' was already deleted from server`)\n          setTimeout(() => { setErrorMessage(null) }, 5000)\n        })\n    }\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const rowsFilter = filter === \"\" ? persons : persons.filter(\n    person => {\n      const pName = person['name'].toUpperCase()\n      return pName.includes(filter.toUpperCase())\n    }\n  )\n\n  const rows = () => rowsFilter.map(p =>\n    < li key={p.id} > {p.name} {p.number} <button onClick={() => handleDeleteClick(p)}>delete</button></li >\n  )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification successMessage={successMessage} errorMessage={errorMessage} />\n      <Filter value={filter} handleFilterChange={(e) => handleFilterChange(e)} />\n      <h3>add a new</h3>\n      <PersonForm addName={(e) => addName(e)} newName={newName} newNumber={newNumber}\n        handleNameChange={(e) => handleNameChange(e)} handleNumberChange={(e) => handleNumberChange(e)} />\n      <h3>Numbers</h3>\n      <Persons rows={() => rows()} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}